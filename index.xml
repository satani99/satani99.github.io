<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nikhil&#39;s blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Nikhil&#39;s blog</description>
    <generator>Hugo -- 0.138.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Aug 2024 12:38:50 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Diffusion101</title>
      <link>http://localhost:1313/posts/diffusion/</link>
      <pubDate>Sat, 24 Aug 2024 12:38:50 +0530</pubDate>
      <guid>http://localhost:1313/posts/diffusion/</guid>
      <description>&lt;p&gt;Diffusion sampling&lt;br&gt;
Diffusion distillation&lt;/p&gt;</description>
    </item>
    <item>
      <title>Diffusion</title>
      <link>http://localhost:1313/posts/mypost/</link>
      <pubDate>Sat, 24 Aug 2024 12:27:47 +0530</pubDate>
      <guid>http://localhost:1313/posts/mypost/</guid>
      <description>&lt;p&gt;Diffusion models are a class of generative models that have gained significant attention in the field of machine learning and artificial intelligence. These models are designed to generate new data samples that are similar to a given dataset. The core idea behind diffusion models is to iteratively refine random noise into meaningful data through a series of transformations.&lt;/p&gt;
&lt;h3 id=&#34;how-diffusion-models-work&#34;&gt;How Diffusion Models Work&lt;/h3&gt;
&lt;p&gt;The process begins with a random noise vector, which is gradually transformed into a data sample through a series of steps. Each step involves a small, incremental change that moves the noise closer to the desired data distribution. This is achieved by modeling the reverse process of a diffusion process, where data is gradually corrupted by noise.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/prompts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/prompts/</guid>
      <description>&lt;h1 id=&#34;1-code-generation&#34;&gt;1. Code Generation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generate python code for a program that simulates a basic banking system. The program should allow users to create new accounts, deposit and withdraw funds, and check their account balance. Ensure the code includes error handling for invalid inputs (e.g., negative deposit amounts) and uses appropriate data structures to store account information. The code should be well-documented with comments explaining the functionality of each part.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement a graph traversal algorithm in Java that identifies the shortest path between two nodes in a weighted, directed acyclic graph. The graph can be represented using an adjacency list. The algorithm should have a time complexity of O(V+E), where V is the number of vertices and E is the number of edges. Include a main method that demonstrates the usage of the algorithm with a sample graph and two nodes.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
